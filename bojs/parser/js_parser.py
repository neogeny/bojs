#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {
    'break',
    'case',
    'catch',
    'class',
    'const',
    'continue',
    'debugger',
    'default',
    'delete',
    'do',
    'else',
    'enum',
    'export',
    'extends',
    'finally',
    'for',
    'function',
    'if',
    'implements',
    'import',
    'in',
    'instanceof',
    'interface',
    'let',
    'new',
    'package',
    'private',
    'protected',
    'public',
    'return',
    'static',
    'super',
    'switch',
    'this',
    'throw',
    'try',
    'typeof',
    'var',
    'void',
    'while',
    'with',
    'yield',
}  # type: ignore


class JavaScriptBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re='\\/\\*(.|[\\r\\n])*?\\*\\/',
        eol_comments_re='\\/\\/[^\\r\\n]*(\\r?\\n|\\r|$)',
        ignorecase=False,
        namechars='',
        **kwargs
    ):
        super(JavaScriptBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class JavaScriptParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re='\\/\\*(.|[\\r\\n])*?\\*\\/',
        eol_comments_re='\\/\\/[^\\r\\n]*(\\r?\\n|\\r|$)',
        ignorecase=False,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=JavaScriptBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(JavaScriptParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa
        self._program_()
        self.name_last_node('@')
        self._check_eof()

    @tatsumasu()
    def _program_(self):  # noqa
        with self._optional():
            self._token('"')
            self._token('use')
            self._token('strict')
            self._token('"')
            self._token(';')
        self._source_elements_()

    @tatsumasu()
    def _source_element_(self):  # noqa
        with self._optional():
            self._token('export')
        self._statement_()

    @tatsumasu()
    def _statement_(self):  # noqa
        with self._choice():
            with self._option():
                self._block_()
            with self._option():
                self._variable_statement_()
            with self._option():
                self._empty_statement_()
            with self._option():
                self._expression_statement_()
            with self._option():
                self._if_statement_()
            with self._option():
                self._iteration_statement_()
            with self._option():
                self._continue_statement_()
            with self._option():
                self._break_statement_()
            with self._option():
                self._return_statement_()
            with self._option():
                self._with_statement_()
            with self._option():
                self._labelled_statement_()
            with self._option():
                self._switch_statement_()
            with self._option():
                self._throw_statement_()
            with self._option():
                self._try_statement_()
            with self._option():
                self._debugger_statement_()
            with self._option():
                self._function_declaration_()
            with self._option():
                self._class_declaration_()
            self._error('no available options')

    @tatsumasu()
    def _block_(self):  # noqa
        self._token('{')
        with self._optional():
            self._statement_list_()
        self._token('}')

    @tatsumasu()
    def _statement_list_(self):  # noqa

        def block0():
            self._statement_()
        self._positive_closure(block0)

    @tatsumasu()
    def _variable_statement_(self):  # noqa
        self._var_modifier_()
        self._variable_declaration_list_()
        self._eos_()

    @tatsumasu()
    def _variable_declaration_list_(self):  # noqa
        self._variable_declaration_()

        def block0():
            self._token(',')
            self._variable_declaration_()
        self._closure(block0)

    @tatsumasu()
    def _variable_declaration_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._identifier_()
                with self._option():
                    self._array_literal_()
                with self._option():
                    self._object_literal_()
                self._error('no available options')
        with self._optional():
            self._token('=')
            self._single_expression_()

    @tatsumasu()
    def _empty_statement_(self):  # noqa
        self._token(';')

    @tatsumasu()
    def _expression_statement_(self):  # noqa
        self._expression_sequence_()
        self._eos_()

    @tatsumasu()
    def _if_statement_(self):  # noqa
        self._token('if')
        self._token('(')
        self._expression_sequence_()
        self._token(')')
        self._statement_()
        with self._optional():
            self._token('else')
            self._statement_()

    @tatsumasu()
    def _iteration_statement_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('do')
                self._statement_()
                self._token('while')
                self._token('(')
                self._expression_sequence_()
                self._token(')')
                self._eos_()
            with self._option():
                self._token('while')
                self._token('(')
                self._expression_sequence_()
                self._token(')')
                self._statement_()
            with self._option():
                self._token('for')
                self._token('(')
                with self._optional():
                    self._expression_sequence_()
                self._token(';')
                with self._optional():
                    self._expression_sequence_()
                self._token(';')
                with self._optional():
                    self._expression_sequence_()
                self._token(')')
                self._statement_()
            with self._option():
                self._token('for')
                self._token('(')
                self._var_modifier_()
                self._variable_declaration_list_()
                self._token(';')
                with self._optional():
                    self._expression_sequence_()
                self._token(';')
                with self._optional():
                    self._expression_sequence_()
                self._token(')')
                self._statement_()
            with self._option():
                self._token('for')
                self._token('(')
                self._single_expression_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('in')
                        with self._option():
                            self._identifier_()
                        self._error('no available options')
                self._expression_sequence_()
                self._token(')')
                self._statement_()
            with self._option():
                self._token('for')
                self._token('(')
                self._var_modifier_()
                self._variable_declaration_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('in')
                        with self._option():
                            self._identifier_()
                        self._error('no available options')
                self._expression_sequence_()
                self._token(')')
                self._statement_()
            self._error('no available options')

    @tatsumasu()
    def _var_modifier_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('var')
            with self._option():
                self._token('let')
            with self._option():
                self._token('const')
            self._error('no available options')

    @tatsumasu()
    def _continue_statement_(self):  # noqa
        self._token('continue')
        with self._optional():
            self._identifier_()
        self._eos_()

    @tatsumasu()
    def _break_statement_(self):  # noqa
        self._token('break')
        with self._optional():
            self._identifier_()
        self._eos_()

    @tatsumasu()
    def _return_statement_(self):  # noqa
        self._token('return')
        with self._optional():
            self._expression_sequence_()
        self._eos_()

    @tatsumasu()
    def _with_statement_(self):  # noqa
        self._token('with')
        self._token('(')
        self._expression_sequence_()
        self._token(')')
        self._statement_()

    @tatsumasu()
    def _switch_statement_(self):  # noqa
        self._token('switch')
        self._token('(')
        self._expression_sequence_()
        self._token(')')
        self._case_block_()

    @tatsumasu()
    def _case_block_(self):  # noqa
        self._token('{')
        with self._optional():
            self._case_clauses_()
        with self._optional():
            self._default_clause_()
            with self._optional():
                self._case_clauses_()
        self._token('}')

    @tatsumasu()
    def _case_clauses_(self):  # noqa

        def block0():
            self._case_clause_()
        self._positive_closure(block0)

    @tatsumasu()
    def _case_clause_(self):  # noqa
        self._token('case')
        self._expression_sequence_()
        self._token(':')
        with self._optional():
            self._statement_list_()

    @tatsumasu()
    def _default_clause_(self):  # noqa
        self._token('default')
        self._token(':')
        with self._optional():
            self._statement_list_()

    @tatsumasu()
    def _labelled_statement_(self):  # noqa
        self._identifier_()
        self._token(':')
        self._statement_()

    @tatsumasu()
    def _throw_statement_(self):  # noqa
        self._token('throw')
        self._expression_sequence_()
        self._eos_()

    @tatsumasu()
    def _try_statement_(self):  # noqa
        self._token('try')
        self._block_()
        with self._group():
            with self._choice():
                with self._option():
                    self._catch_production_()
                    with self._optional():
                        self._finally_production_()
                with self._option():
                    self._finally_production_()
                self._error('no available options')

    @tatsumasu()
    def _catch_production_(self):  # noqa
        self._token('catch')
        self._token('(')
        self._identifier_()
        self._token(')')
        self._block_()

    @tatsumasu()
    def _finally_production_(self):  # noqa
        self._token('finally')
        self._block_()

    @tatsumasu()
    def _debugger_statement_(self):  # noqa
        self._token('debugger')
        self._eos_()

    @tatsumasu()
    def _function_declaration_(self):  # noqa
        self._token('function')
        self._identifier_()
        self._token('(')
        with self._optional():
            self._formal_parameter_list_()
        self._token(')')
        self._token('{')
        self._function_body_()
        self._token('}')

    @tatsumasu()
    def _class_declaration_(self):  # noqa
        self._token('class')
        self._identifier_()
        self._class_tail_()

    @tatsumasu()
    def _class_tail_(self):  # noqa
        with self._optional():
            self._token('extends')
            self._single_expression_()
        self._token('{')

        def block0():
            self._class_element_()
        self._closure(block0)
        self._token('}')

    @tatsumasu()
    def _class_element_(self):  # noqa
        with self._choice():
            with self._option():
                with self._optional():
                    with self._choice():
                        with self._option():
                            self._token('static')
                        with self._option():
                            self._identifier_()
                        self._error('no available options')
                self._method_definition_()
            with self._option():
                self._empty_statement_()
            self._error('no available options')

    @tatsumasu()
    def _method_definition_(self):  # noqa
        with self._choice():
            with self._option():
                self._property_name_()
                self._token('(')
                with self._optional():
                    self._formal_parameter_list_()
                self._token(')')
                self._token('{')
                self._function_body_()
                self._token('}')
            with self._option():
                self._getter_()
                self._token('(')
                self._token(')')
                self._token('{')
                self._function_body_()
                self._token('}')
            with self._option():
                self._setter_()
                self._token('(')
                with self._optional():
                    self._formal_parameter_list_()
                self._token(')')
                self._token('{')
                self._function_body_()
                self._token('}')
            with self._option():
                self._generator_method_()
            self._error('no available options')

    @tatsumasu()
    def _generator_method_(self):  # noqa
        with self._optional():
            self._token('*')
        self._identifier_()
        self._token('(')
        with self._optional():
            self._formal_parameter_list_()
        self._token(')')
        self._token('{')
        self._function_body_()
        self._token('}')

    @tatsumasu()
    def _formal_parameter_list_(self):  # noqa
        with self._choice():
            with self._option():
                self._formal_parameter_arg_()

                def block0():
                    self._token(',')
                    self._formal_parameter_arg_()
                self._closure(block0)
                with self._optional():
                    self._token(',')
                    self._last_formal_parameter_arg_()
            with self._option():
                self._last_formal_parameter_arg_()
            with self._option():
                self._array_literal_()
            with self._option():
                self._object_literal_()
            self._error('no available options')

    @tatsumasu()
    def _formal_parameter_arg_(self):  # noqa
        self._identifier_()
        with self._optional():
            self._token('=')
            self._single_expression_()

    @tatsumasu()
    def _last_formal_parameter_arg_(self):  # noqa
        self._token('...')
        self._identifier_()

    @tatsumasu()
    def _function_body_(self):  # noqa
        self._source_elements_()

    @tatsumasu()
    def _source_elements_(self):  # noqa

        def block0():
            self._source_element_()
        self._closure(block0)

    @tatsumasu()
    def _array_literal_(self):  # noqa
        self._token('[')

        def block0():
            self._token(',')
        self._closure(block0)
        with self._optional():
            self._element_list_()

        def block1():
            self._token(',')
        self._closure(block1)
        self._token(']')

    @tatsumasu()
    def _element_list_(self):  # noqa
        with self._choice():
            with self._option():
                self._single_expression_()

                def block0():

                    def block1():
                        self._token(',')
                    self._positive_closure(block1)
                    self._single_expression_()
                self._closure(block0)
                with self._optional():

                    def block2():
                        self._token(',')
                    self._positive_closure(block2)
                    self._last_element_()
            with self._option():
                self._last_element_()
            self._error('no available options')

    @tatsumasu()
    def _last_element_(self):  # noqa
        self._token('...')
        self._identifier_()

    @tatsumasu()
    def _object_literal_(self):  # noqa
        self._token('{')
        with self._optional():
            self._property_assignment_()

            def block0():
                self._token(',')
                self._property_assignment_()
            self._closure(block0)
        with self._optional():
            self._token(',')
        self._token('}')

    @tatsumasu()
    def _property_assignment_(self):  # noqa
        with self._choice():
            with self._option():
                self._property_name_()
                self._pattern('[:=]')
                self._single_expression_()
            with self._option():
                self._token('[')
                self._single_expression_()
                self._token(']')
                self._token(':')
                self._single_expression_()
            with self._option():
                self._getter_()
                self._token('(')
                self._token(')')
                self._token('{')
                self._function_body_()
                self._token('}')
            with self._option():
                self._setter_()
                self._token('(')
                self._identifier_()
                self._token(')')
                self._token('{')
                self._function_body_()
                self._token('}')
            with self._option():
                self._generator_method_()
            with self._option():
                self._identifier_()
            self._error('no available options')

    @tatsumasu()
    def _property_name_(self):  # noqa
        with self._choice():
            with self._option():
                self._identifier_name_()
            with self._option():
                self._string_literal_()
            with self._option():
                self._numeric_literal_()
            self._error('no available options')

    @tatsumasu()
    def _arguments_(self):  # noqa
        self._token('(')
        with self._optional():
            with self._choice():
                with self._option():
                    self._single_expression_()

                    def block0():
                        self._token(',')
                        self._single_expression_()
                    self._closure(block0)
                    with self._optional():
                        self._token(',')
                        self._last_argument_()
                with self._option():
                    self._last_argument_()
                self._error('no available options')
        self._token(')')

    @tatsumasu()
    def _last_argument_(self):  # noqa
        self._token('...')
        self._identifier_()

    @tatsumasu()
    def _expression_sequence_(self):  # noqa

        def sep0():
            self._token(',')

        def block0():
            self._single_expression_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _single_expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('function')
                with self._optional():
                    self._identifier_()
                self._token('(')
                with self._optional():
                    self._formal_parameter_list_()
                self._token(')')
                self._token('{')
                self._function_body_()
                self._token('}')
            with self._option():
                self._token('class')
                with self._optional():
                    self._identifier_()
                self._class_tail_()
            with self._option():
                self._single_expression_()
                self._token('[')
                self._expression_sequence_()
                self._token(']')
            with self._option():
                self._single_expression_()
                self._token('.')
                self._identifier_name_()
            with self._option():
                self._single_expression_()
                self._arguments_()
            with self._option():
                self._token('new')
                self._single_expression_()
                with self._optional():
                    self._arguments_()
            with self._option():
                self._single_expression_()
                self._token('++')
            with self._option():
                self._single_expression_()
                self._token('--')
            with self._option():
                self._token('delete')
                self._single_expression_()
            with self._option():
                self._token('void')
                self._single_expression_()
            with self._option():
                self._token('typeof')
                self._single_expression_()
            with self._option():
                self._token('++')
                self._single_expression_()
            with self._option():
                self._token('--')
                self._single_expression_()
            with self._option():
                self._token('+')
                self._single_expression_()
            with self._option():
                self._token('-')
                self._single_expression_()
            with self._option():
                self._token('~')
                self._single_expression_()
            with self._option():
                self._token('!')
                self._single_expression_()
            with self._option():
                self._single_expression_()
                self._pattern('[*/%]')
                self._single_expression_()
            with self._option():
                self._single_expression_()
                self._pattern('[+-]')
                self._single_expression_()
            with self._option():
                self._single_expression_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('<<')
                        with self._option():
                            self._token('>>')
                        with self._option():
                            self._token('>>>')
                        self._error('no available options')
                self._single_expression_()
            with self._option():
                self._single_expression_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern('[<>]')
                        with self._option():
                            self._token('<=')
                        with self._option():
                            self._token('>=')
                        with self._option():
                            self._token('>')
                        with self._option():
                            self._token('<')
                        self._error('no available options')
                self._single_expression_()
            with self._option():
                self._single_expression_()
                self._token('instanceof')
                self._single_expression_()
            with self._option():
                self._single_expression_()
                self._token('in')
                self._single_expression_()
            with self._option():
                self._single_expression_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('==')
                        with self._option():
                            self._token('!=')
                        with self._option():
                            self._token('===')
                        with self._option():
                            self._token('!==')
                        self._error('no available options')
                self._single_expression_()
            with self._option():
                self._single_expression_()
                self._token('&')
                self._single_expression_()
            with self._option():
                self._single_expression_()
                self._token('^')
                self._single_expression_()
            with self._option():
                self._single_expression_()
                self._token('|')
                self._single_expression_()
            with self._option():
                self._single_expression_()
                self._token('&&')
                self._single_expression_()
            with self._option():
                self._single_expression_()
                self._token('||')
                self._single_expression_()
            with self._option():
                self._single_expression_()
                self._token('?')
                self._single_expression_()
                self._token(':')
                self._single_expression_()
            with self._option():
                self._single_expression_()
                self._token('=')
                self._single_expression_()
            with self._option():
                self._single_expression_()
                self._assignment_operator_()
                self._single_expression_()
            with self._option():
                self._single_expression_()
                self._TEMPLATE_STRING_LITERAL_()
            with self._option():
                self._token('this')
            with self._option():
                self._identifier_()
            with self._option():
                self._token('super')
            with self._option():
                self._literal_()
            with self._option():
                self._array_literal_()
            with self._option():
                self._object_literal_()
            with self._option():
                self._token('(')
                self._expression_sequence_()
                self._token(')')
            with self._option():
                self._arrow_function_parameters_()
                self._token('=>')
                self._arrow_function_body_()
            self._error('no available options')

    @tatsumasu()
    def _arrow_function_parameters_(self):  # noqa
        with self._choice():
            with self._option():
                self._identifier_()
            with self._option():
                self._token('(')
                with self._optional():
                    self._formal_parameter_list_()
                self._token(')')
            self._error('no available options')

    @tatsumasu()
    def _arrow_function_body_(self):  # noqa
        with self._choice():
            with self._option():
                self._single_expression_()
            with self._option():
                self._token('{')
                self._function_body_()
                self._token('}')
            self._error('no available options')

    @tatsumasu()
    def _assignment_operator_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('*=')
            with self._option():
                self._token('/=')
            with self._option():
                self._token('%=')
            with self._option():
                self._token('+=')
            with self._option():
                self._token('-=')
            with self._option():
                self._token('<<=')
            with self._option():
                self._token('>>=')
            with self._option():
                self._token('>>>=')
            with self._option():
                self._token('&=')
            with self._option():
                self._token('^=')
            with self._option():
                self._token('|=')
            self._error('no available options')

    @tatsumasu()
    def _literal_(self):  # noqa
        with self._choice():
            with self._option():
                self._null_()
            with self._option():
                self._boolean_literal_()
            with self._option():
                self._string_literal_()
            with self._option():
                self._TEMPLATE_STRING_LITERAL_()
            with self._option():
                self._REGULAR_EXPRESSION_LITERAL_()
            with self._option():
                self._numeric_literal_()
            self._error('no available options')

    @tatsumasu()
    def _null_(self):  # noqa
        self._token('null')
        self._cut()

    @tatsumasu()
    def _numeric_literal_(self):  # noqa
        with self._choice():
            with self._option():
                self._floating_point_literal_()
            with self._option():
                self._integer_literal_()
            self._error('no available options')

    @tatsumasu()
    def _identifier_name_(self):  # noqa
        with self._choice():
            with self._option():
                self._identifier_()
            with self._option():
                self._reserved_word_()
            self._error('no available options')

    @tatsumasu()
    def _reserved_word_(self):  # noqa
        with self._choice():
            with self._option():
                self._keyword_()
            with self._option():
                self._token('null')
            with self._option():
                self._boolean_literal_()
            self._error('no available options')

    @tatsumasu()
    def _keyword_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('break')
            with self._option():
                self._token('do')
            with self._option():
                self._token('instanceof')
            with self._option():
                self._token('typeof')
            with self._option():
                self._token('case')
            with self._option():
                self._token('else')
            with self._option():
                self._token('new')
            with self._option():
                self._token('var')
            with self._option():
                self._token('catch')
            with self._option():
                self._token('finally')
            with self._option():
                self._token('return')
            with self._option():
                self._token('void')
            with self._option():
                self._token('continue')
            with self._option():
                self._token('for')
            with self._option():
                self._token('switch')
            with self._option():
                self._token('while')
            with self._option():
                self._token('debugger')
            with self._option():
                self._token('function')
            with self._option():
                self._token('this')
            with self._option():
                self._token('with')
            with self._option():
                self._token('default')
            with self._option():
                self._token('if')
            with self._option():
                self._token('throw')
            with self._option():
                self._token('delete')
            with self._option():
                self._token('in')
            with self._option():
                self._token('try')
            with self._option():
                self._token('class')
            with self._option():
                self._token('enum')
            with self._option():
                self._token('extends')
            with self._option():
                self._token('super')
            with self._option():
                self._token('const')
            with self._option():
                self._token('export')
            with self._option():
                self._token('import')
            with self._option():
                self._token('implements')
            with self._option():
                self._token('let')
            with self._option():
                self._token('private')
            with self._option():
                self._token('public')
            with self._option():
                self._token('interface')
            with self._option():
                self._token('package')
            with self._option():
                self._token('protected')
            with self._option():
                self._token('static')
            with self._option():
                self._token('yield')
            self._error('no available options')

    @tatsumasu()
    def _getter_(self):  # noqa
        self._identifier_()
        self._property_name_()

    @tatsumasu()
    def _setter_(self):  # noqa
        self._identifier_()
        self._property_name_()

    @tatsumasu()
    def _eos_(self):  # noqa
        with self._choice():
            with self._option():
                self._token(';')
            with self._option():
                self._check_eof()
            with self._option():
                self._void()
            with self._option():
                self._void()
            self._error('no available options')

    @tatsumasu()
    def _REGULAR_EXPRESSION_LITERAL_(self):  # noqa
        self._token('/')

        def block0():
            self._REGULAR_EXPRESSION_CHAR_()
        self._positive_closure(block0)
        self._token('/')
        self._pattern('(?:[\\w\\d]|\\\\u[\\dA-Fa-f]{4})*')

    @tatsumasu()
    def _boolean_literal_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('true')
            with self._option():
                self._token('false')
            self._error('no available options')

    @tatsumasu('Integer')
    def _integer_literal_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._hex_integer_literal_()
                with self._option():
                    self._octal_integer_literal_()
                with self._option():
                    self._binary_integer_literal_()
                with self._option():
                    self._decimal_integer_literal_()
                self._error('no available options')
        self.name_last_node('value')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _decimal_integer_literal_(self):  # noqa
        self._pattern('(0|[1-9]([_]*[0-9])*)[lL]?')

    @tatsumasu()
    def _hex_integer_literal_(self):  # noqa
        self._pattern('0[xX][0-9a-fA-F]([_]*[0-9a-fA-F])*[lL]?')

    @tatsumasu()
    def _octal_integer_literal_(self):  # noqa
        self._pattern('0[_]*[0-7]([_]*[0-7])*[lL]?')

    @tatsumasu()
    def _binary_integer_literal_(self):  # noqa
        self._pattern('0[bB][01]([01_]*[01])*[lL]?')

    @tatsumasu()
    def _floating_point_literal_(self):  # noqa
        with self._choice():
            with self._option():
                self._decimal_floating_point_literal_()
            with self._option():
                self._hexadecimal_floating_point_literal_()
            self._error('no available options')

    @tatsumasu('Float')
    def _decimal_floating_point_literal_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern('[0-9][0-9_]*[.][0-9]*([eE][-+]?[0-9]+)?[fFdD]?')
                with self._option():
                    self._pattern('[.][0-9]+([eE][-+]?[0-9]+)?[fFdD]?')
                with self._option():
                    self._pattern('[0-9][0-9_]*[eE][-+]?[0-9]+[fFdD]?')
                with self._option():
                    self._pattern('[0-9][0-9_]*[fFdD]')
                self._error('no available options')
        self.name_last_node('value')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu('HexFloat')
    def _hexadecimal_floating_point_literal_(self):  # noqa
        self._pattern('0[xX][0-9a-fA-F]([_]*[0-9a-fA-F])*([.][0-9a-fA-F]*)?[pP][-+]?[0-9]+[fFdD]?')
        self.name_last_node('value')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _identifier_(self):  # noqa
        self._IDENTIFIER_()

    @tatsumasu()
    def _IDENTIFIER_(self):  # noqa
        self._pattern('[\\w$](?:[\\w\\d]|\\\\u[\\dA-Fa-f]{4})*')

    @tatsumasu()
    def _string_literal_(self):  # noqa
        self._token('"')
        self._pattern('([^"\\n\\r\\\\]|\\\\[btnfr"\'\\\\]|\\\\[0-7]{1,3}|\\\\u[0-9a-fA-F]{4})*')
        self.name_last_node('value')
        self._token('"')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _TEMPLATE_STRING_LITERAL_(self):  # noqa
        self._token('`')

        def block0():
            with self._choice():
                with self._option():
                    self._token('\\\\`')
                with self._option():
                    with self._ifnot():
                        self._token('`')
                    self._pattern('.')
                self._error('no available options')
        self._closure(block0)
        self._token('`')

    @tatsumasu()
    def _HTML_COMMENT_(self):  # noqa
        self._token('<!--')
        with self._optional():
            self._pattern('\\w+|\\S+')
        self._token('-->')

    @tatsumasu()
    def _CDATA_COMMENT_(self):  # noqa
        self._token('<![CDATA[')
        with self._optional():
            self._pattern('\\w+|\\S+')
        self._token(']]>')

    @tatsumasu()
    def _REGULAR_EXPRESSION_CHAR_(self):  # noqa
        with self._choice():
            with self._option():
                with self._ifnot():
                    self._pattern('[\\r\\n\\u2028\\u2029\\\\/[]')
                self._pattern('.')
            with self._option():
                self._REGULAR_EXPRESSION_BACKSLASH_SEQUENCE_()
            with self._option():
                self._token('[')

                def block0():
                    self._REGULAR_EXPRESSION_CLASS_CHAR_()
                self._closure(block0)
                self._token(']')
            self._error('no available options')

    @tatsumasu()
    def _REGULAR_EXPRESSION_CLASS_CHAR_(self):  # noqa
        with self._choice():
            with self._option():
                with self._ifnot():
                    self._pattern('[\\r\\n\\u2028\\u2029\\]\\\\]')
                self._pattern('.')
            with self._option():
                self._REGULAR_EXPRESSION_BACKSLASH_SEQUENCE_()
            self._error('no available options')

    @tatsumasu()
    def _REGULAR_EXPRESSION_BACKSLASH_SEQUENCE_(self):  # noqa
        self._token('\\\\')
        with self._ifnot():
            self._pattern('[\\r\\n\\u2028\\u2029]')
        self._pattern('.')


class JavaScriptSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def program(self, ast):  # noqa
        return ast

    def source_element(self, ast):  # noqa
        return ast

    def statement(self, ast):  # noqa
        return ast

    def block(self, ast):  # noqa
        return ast

    def statement_list(self, ast):  # noqa
        return ast

    def variable_statement(self, ast):  # noqa
        return ast

    def variable_declaration_list(self, ast):  # noqa
        return ast

    def variable_declaration(self, ast):  # noqa
        return ast

    def empty_statement(self, ast):  # noqa
        return ast

    def expression_statement(self, ast):  # noqa
        return ast

    def if_statement(self, ast):  # noqa
        return ast

    def iteration_statement(self, ast):  # noqa
        return ast

    def var_modifier(self, ast):  # noqa
        return ast

    def continue_statement(self, ast):  # noqa
        return ast

    def break_statement(self, ast):  # noqa
        return ast

    def return_statement(self, ast):  # noqa
        return ast

    def with_statement(self, ast):  # noqa
        return ast

    def switch_statement(self, ast):  # noqa
        return ast

    def case_block(self, ast):  # noqa
        return ast

    def case_clauses(self, ast):  # noqa
        return ast

    def case_clause(self, ast):  # noqa
        return ast

    def default_clause(self, ast):  # noqa
        return ast

    def labelled_statement(self, ast):  # noqa
        return ast

    def throw_statement(self, ast):  # noqa
        return ast

    def try_statement(self, ast):  # noqa
        return ast

    def catch_production(self, ast):  # noqa
        return ast

    def finally_production(self, ast):  # noqa
        return ast

    def debugger_statement(self, ast):  # noqa
        return ast

    def function_declaration(self, ast):  # noqa
        return ast

    def class_declaration(self, ast):  # noqa
        return ast

    def class_tail(self, ast):  # noqa
        return ast

    def class_element(self, ast):  # noqa
        return ast

    def method_definition(self, ast):  # noqa
        return ast

    def generator_method(self, ast):  # noqa
        return ast

    def formal_parameter_list(self, ast):  # noqa
        return ast

    def formal_parameter_arg(self, ast):  # noqa
        return ast

    def last_formal_parameter_arg(self, ast):  # noqa
        return ast

    def function_body(self, ast):  # noqa
        return ast

    def source_elements(self, ast):  # noqa
        return ast

    def array_literal(self, ast):  # noqa
        return ast

    def element_list(self, ast):  # noqa
        return ast

    def last_element(self, ast):  # noqa
        return ast

    def object_literal(self, ast):  # noqa
        return ast

    def property_assignment(self, ast):  # noqa
        return ast

    def property_name(self, ast):  # noqa
        return ast

    def arguments(self, ast):  # noqa
        return ast

    def last_argument(self, ast):  # noqa
        return ast

    def expression_sequence(self, ast):  # noqa
        return ast

    def single_expression(self, ast):  # noqa
        return ast

    def arrow_function_parameters(self, ast):  # noqa
        return ast

    def arrow_function_body(self, ast):  # noqa
        return ast

    def assignment_operator(self, ast):  # noqa
        return ast

    def literal(self, ast):  # noqa
        return ast

    def null(self, ast):  # noqa
        return ast

    def numeric_literal(self, ast):  # noqa
        return ast

    def identifier_name(self, ast):  # noqa
        return ast

    def reserved_word(self, ast):  # noqa
        return ast

    def keyword(self, ast):  # noqa
        return ast

    def getter(self, ast):  # noqa
        return ast

    def setter(self, ast):  # noqa
        return ast

    def eos(self, ast):  # noqa
        return ast

    def REGULAR_EXPRESSION_LITERAL(self, ast):  # noqa
        return ast

    def boolean_literal(self, ast):  # noqa
        return ast

    def integer_literal(self, ast):  # noqa
        return ast

    def decimal_integer_literal(self, ast):  # noqa
        return ast

    def hex_integer_literal(self, ast):  # noqa
        return ast

    def octal_integer_literal(self, ast):  # noqa
        return ast

    def binary_integer_literal(self, ast):  # noqa
        return ast

    def floating_point_literal(self, ast):  # noqa
        return ast

    def decimal_floating_point_literal(self, ast):  # noqa
        return ast

    def hexadecimal_floating_point_literal(self, ast):  # noqa
        return ast

    def identifier(self, ast):  # noqa
        return ast

    def IDENTIFIER(self, ast):  # noqa
        return ast

    def string_literal(self, ast):  # noqa
        return ast

    def TEMPLATE_STRING_LITERAL(self, ast):  # noqa
        return ast

    def HTML_COMMENT(self, ast):  # noqa
        return ast

    def CDATA_COMMENT(self, ast):  # noqa
        return ast

    def REGULAR_EXPRESSION_CHAR(self, ast):  # noqa
        return ast

    def REGULAR_EXPRESSION_CLASS_CHAR(self, ast):  # noqa
        return ast

    def REGULAR_EXPRESSION_BACKSLASH_SEQUENCE(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = JavaScriptParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, JavaScriptParser, name='JavaScript')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
